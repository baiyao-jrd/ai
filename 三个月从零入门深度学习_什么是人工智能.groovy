// 1. 讲师信息
名字: 胡晓曼
博客园: cnblogs.com/charlotte77
github: github.com/huxiaoman7
微信公众号: CharlotteDataMining

// 2. 课程目的
1) 知道深度学习是啥? 
2) 能胜任基本的深度学习项目
3) 掌握基本的Python编程能力
4) 熟悉常见深度学习算法数学推导

// 3. 啥是深度学习
人工智能 {
    机器学习 {
        深度学习
    }
}

// 4. 如何选择自己的从业方向
认清自己, 找准优势 -> 结合兴趣, 选择方向 -> 制定计划, 不断努力 -> 阶段检查, 查漏补缺

    -> 选择好某一个ai反向之后, 不要乱变了, 把一个弄好, 不要都弄, 最后都弄不好

// 5. 深度学习的前期准备和时间规划
1) 学习的三大原则
    保证时间 -> 工作日能保证每天2小时, 周末保证大块儿时间学习? 
    学会坚持 -> 
    勤奋钻研 -> 


    demo侠--->调参侠--->懂原理侠--->懂原理+能改模型细节侠--->超大数据操控侠--->模型/框架架构师

    demo侠: 下载了目前所有流行的框架, 对不同框里的例子都跑一跑, 看看结果, 觉得不错就行了, 进而觉得, 嘛, 深度学习也不过如此嘛, 没有多难啊. 这种人, 我在面试的时候遇到了不少, 很多学生或者刚转行的上来就是讲一个demo, 手写数字识别, cifar10数据的图像分类等等, 然而你问他这个手写数字识别的具体过程如何实现的? 现在效果是不是目前做好的, 可以再优化一下吗? 为什么激活函数要选这个, 可以选别的吗? CNN的原理能简单讲讲吗? 懵逼了. 

    调参侠: 此类人可能不局限于跑了几个demo, 对于模型里的参数也做了一些调整, 不管调的好不好, 先试了再说, 每个都试一下, 学习率调大了准确率下降了, 那就调小一点, 那个参数不知道啥意思, 随便改一下值测一下准确率吧. 这是大多数初级深度学习工程师的现状. 当然, 并不是这样不好, 对于demo侠来说, 已经进步了不少了, 起码有思考. 然而如果你问, 你调整的这个参数为什么会对模型的准确率带来这些影响, 这个参数调大调小对结果又会有哪些影响, 就又是一问三不知了. 

    懂原理侠: 抱歉我起了个这么蠢的名字. 但是, 进阶到这一步, 已经可以算是入门了, 可以找一份能养活自己的工作了. CNN, RNN, LSTM信手拈来, 原理讲的溜的飞起, 对于不同的参数对模型的影响也是说的有理有据, 然而, 如果你要问, 你可以手动写一个CNN吗? 不用调包, 实现一个最基础的网络结构即可, 又gg了. 

    懂原理+能改模型细节侠: 如果你到了这一步, 恭喜你, 入门了. 对于任何一个做机器学习/深度学习的人来说, 只懂原理是远远不够的, 因为公司不是招你来做研究员的, 来了就要干活, 干活就要落地. 既然要落地, 那就对于每一个你熟悉的, 常见的模型能够自己手动写代码运行出来, 这样对于公司的一些业务, 可以对模型进行适当的调整和改动, 来适应不同的业务场景. 这也是大多数一二线公司的工程师们的现状. 然而, 对于模型的整体架构能力, 超大数据的分布式运行能力, 方案设计可能还有所欠缺, 本人也一直在这个阶段不停努力, 希望能够更进一步. 

    超大数据操控侠: 到这一阶段, 基本上开始考虑超大数据的分布式运行方案, 对整体架构有一个宏观的了解, 对不同的框架也能指点一二. 海量数据的分布式运行如何避免网络通信的延迟, 如何更高效更迅速的训练都有一定经验. 这类人, 一般就是我这种虾米的领导了. 

    模型/框架架构师: 前面说了一堆都是对现有的框架/模型处理的经验, 这个阶段的大侠, 哦, 不对, 是大师可以独立设计开发一套新框架/算法来应对现有的业务场景, 或者解决一直未解决的历史遗留问题. 没啥好说了, 膜拜！

2) 课程的前期准备
    数学: 快速过一遍大体知识点; 针对具体知识点深入学习.

        -> 推荐遇到问题了, 现学现google, 没必要从头学一遍了
        -> 如果还想学, 那么最好是从经典题型入手, 这样快一些

    编程: -> 有基础 -> 快速学python
          -> 没基础 -> 学习笨方法系列, 入门, 学会用

3) 三个月的时间规划
    第一个月: 打好数学和编程基础   
    第二个月: 掌握各类深度学习算法
    第三个月: 训练实战项目, 提升训练性能